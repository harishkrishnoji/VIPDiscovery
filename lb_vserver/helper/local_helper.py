# pylint: disable=W1203, C0103, W0631
"""Script local config."""

import os
import json
import requests
import hvac
from helper_fts.logger import get_logger

# from helper_fts.vault import hashi_vault
# from helper_fts.vault import hashi_vault_rundeck

requests.packages.urllib3.disable_warnings()

log = get_logger()

vdata = {
    "namespace": os.environ.get("VAULT_NAMESPACE"),
    "role_id": os.environ.get("VAULT_ROLE_ID"),
    "secret_id": os.environ.get("VAULT_SECRET_ID"),
    "url": os.environ.get("VAULT_ADDR"),
}


def hashi_vault_rundeck(**kwargs):
    """Hashicorp Vault function for Rundeck job.

    Kwargs:
        role_id (str): Generated by Rundeck plugin.
        secret_id (str): Generated by Rundeck plugin.
        path (str): Path should reflect the path to your secrets.
        namespace (str): Namespace (ex: "network/net-sane").
        url (str, optional): Default url: "https://vault-enterprise.onefiserv.net".

    Returns:
        dict: secrets or token dictionary for given path.
    """
    try:
        vault_client = hvac.Client(verify=False, namespace=kwargs.get("namespace"), url=kwargs.get("url"))
        vault_client.auth.approle.login(
            role_id=kwargs.get("role_id"), secret_id=kwargs.get("secret_id"),
        )
        return vault_client.secrets.kv.read_secret_version(path=kwargs.get("path"))
    except hvac.exceptions.InvalidPath as err:
        return {"error": f"InvalidPath: {err}"}
    except hvac.exceptions.Forbidden as err:
        return {"error": f"InvalidToken: {err}"}


def uploadfile(fname):
    """Upload file to remote server.

    Args:
        fname (str): Filename which need to be uploaded
    """
    url = "https://uschd1linjmp01a.1dc.com/cgi-bin/uploadfile.py"
    files = [("filename", (os.path.basename(fname), open(fname, "rb")))]
    response = requests.request("POST", url, files=files, verify=False)
    return response.text


def getfile(fname=""):
    """Get file from remote server."""
    url = f"https://uschd1linjmp01a.1dc.com/NAT/{fname}"
    response = requests.request("GET", url, verify=False)
    if response.status_code == 200:
        return json.loads(response.text)


def get_credentials(path):
    path = "loadbalancer_secrets"
    # vault_data = hashi_vault(token=token, path=path)
    vdata["path"] = path
    vault_data = hashi_vault_rundeck(**vdata)
    svcp = vault_data["data"]["data"]["svc_acc"].get("password")
    svcu = vault_data["data"]["data"]["svc_acc"].get("username")
    lowu = vault_data["data"]["data"]["f5_lower"].get("username")
    lowp = vault_data["data"]["data"]["f5_lower"].get("username")
    return svcp, svcu, lowu, lowp


def get_nb_keys(url):
    vdata["path"] = "nautobot"
    # vault_data = hashi_vault(token=token, path=path)
    vault_data = hashi_vault_rundeck(**vdata)
    if "-cat" in url.lower():
        return vault_data["data"]["data"]["keys"].get("cat")
    return vault_data["data"]["data"]["keys"].get("prod")
